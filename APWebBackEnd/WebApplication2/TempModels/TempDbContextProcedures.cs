// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using APWeb.TempModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace APWeb.TempModels
{
    public partial class TempDbContext
    {
        private ITempDbContextProcedures _procedures;

        public virtual ITempDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new TempDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ITempDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class TempDbContextProcedures : ITempDbContextProcedures
    {
        private readonly TempDbContext _context;

        public TempDbContextProcedures(TempDbContext context)
        {
            _context = context;
        }

        public virtual async Task<int> InsertProductMovementAsync(string OrderID, int? MovementID, int? MovementType, int? SourceStorageAreaID, int? DestinationStorageAreaID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 100,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MovementID",
                    Value = MovementID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MovementType",
                    Value = MovementType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SourceStorageAreaID",
                    Value = SourceStorageAreaID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DestinationStorageAreaID",
                    Value = DestinationStorageAreaID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertProductMovement] @OrderID = @OrderID, @MovementID = @MovementID, @MovementType = @MovementType, @SourceStorageAreaID = @SourceStorageAreaID, @DestinationStorageAreaID = @DestinationStorageAreaID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertProductMovementItemAsync(string OrderID, int? MovementID, int? ProductItemID, int? SourceWarehouseLocationID, int? DestinationWarehouseLocationID, decimal? Quantity, decimal? UnitCost, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 100,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MovementID",
                    Value = MovementID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductItemID",
                    Value = ProductItemID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SourceWarehouseLocationID",
                    Value = SourceWarehouseLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DestinationWarehouseLocationID",
                    Value = DestinationWarehouseLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Quantity",
                    Precision = 18,
                    Scale = 2,
                    Value = Quantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnitCost",
                    Precision = 18,
                    Scale = 2,
                    Value = UnitCost ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertProductMovementItem] @OrderID = @OrderID, @MovementID = @MovementID, @ProductItemID = @ProductItemID, @SourceWarehouseLocationID = @SourceWarehouseLocationID, @DestinationWarehouseLocationID = @DestinationWarehouseLocationID, @Quantity = @Quantity, @UnitCost = @UnitCost", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
