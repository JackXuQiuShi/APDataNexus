/*using APWeb.Models;
using Microsoft.EntityFrameworkCore;
using System.Reflection.Metadata;

namespace APWeb.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        public DbSet<HMRInventory> HMRInventory { get; set; }
        public DbSet<HMRProduct> HMRProducts { get; set; }
        public DbSet<HMRTransaction> HMRTransactions { get; set; }
        public DbSet<Department> Department { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<PO> POs { get; set; }
        public DbSet<PODetails> PO_Details { get; set; }
        public DbSet<ProductItem> ProductItems { get; set; }
        public DbSet<Inventory> Inventory { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductStores> ProductsStores { get; set; }
        public DbSet<StoreLocation> StoreFloorLocation { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<InvoiceItem> InvoiceItems { get; set; }
        public DbSet<ProductMovement> ProductMovement { get; set; }
        public DbSet<ProductMovementItem> ProductMovementItems { get; set; }
        public DbSet<Warehouse> Warehouses { get; set; }
        public DbSet<WarehouseStorageArea> WarehouseStorageAreas { get; set; }
        public DbSet<WarehouseStorageLocation> WarehouseStorageLocations { get; set; }
        public DbSet<OrderType> OrderTypes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<ProductStores>()
                .ToTable("Products_Store");

            // Define primary keys for entities
            modelBuilder.Entity<Supplier>()
                .HasKey(s => s.Supplier_ID);

            modelBuilder.Entity<Store>()
                .HasKey(s => s.Store_ID);

            modelBuilder.Entity<OrderType>()
                .HasKey(ot => ot.OrderTypeID);

            modelBuilder.Entity<Product>()
                .HasKey(p => p.Prod_Num);   

            modelBuilder.Entity<ProductItem>()
                .HasKey(pi => pi.ItemID);

            modelBuilder.Entity<WarehouseStorageLocation>()
                .HasKey(wsl => wsl.WarehouseLocationID);

            modelBuilder.Entity<Inventory>()
                .HasKey(wi => wi.InventoryID);

            modelBuilder.Entity<OrderItem>()
                .HasKey(oi => new { oi.OrderID, oi.ProductItemID });

            //modelBuilder.Entity<ProductMovement>()
            //    .HasKey(pm => new { pm.OrderID, pm.MovementID });

            modelBuilder.Entity<ProductMovement>(entity =>
            {
                entity.HasKey(e => new { e.MovementID, e.OrderID }); // If composite key

                entity.Property(e => e.MovementStatusID).HasColumnName("MovementStatusID");
                entity.Property(e => e.TotalCost).HasColumnName("TotalCost");

                // Add any other required configurations
            });


            //modelBuilder.Entity<ProductMovementItem>()
            //    .HasKey(pmi => new { pmi.OrderID, pmi.MovementID, pmi.ProductItemID });
            // Configure relationship between ProductMovementItem and ProductMovement
            modelBuilder.Entity<ProductMovementItem>()
                .HasOne(pmi => pmi.ProductMovement)
                .WithMany(pm => pm.ProductMovementItems)
                .HasForeignKey(pmi => new { pmi.MovementID, pmi.OrderID })
                .HasPrincipalKey(pm => new { pm.MovementID, pm.OrderID });


            // Order relationships
            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.OrderID);

                entity.Property(e => e.OrderStatusID).HasColumnName("OrderStatusID");

                // Add any other required configurations
            });

            modelBuilder.Entity<Order>()
                .HasOne(o => o.OrderTypeNavigation)
                .WithMany(ot => ot.Orders)
                .HasForeignKey(o => o.OrderType)
                .HasConstraintName("FK_Orders_OrderType");

            modelBuilder.Entity<Order>()
                .HasOne(o => o.SourceStorageArea)
                .WithMany()
                .HasForeignKey(o => o.SourceStorageAreaID)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("FK_Orders_SourceStorageArea");

            modelBuilder.Entity<Order>()
                .HasOne(o => o.DestinationStorageArea)
                .WithMany()
                .HasForeignKey(o => o.DestinationStorageAreaID)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("FK_Orders_DestinationStorageArea");

            modelBuilder.Entity<Order>()
                .HasMany(o => o.OrderItems)
                .WithOne(oi => oi.Order)
                .HasForeignKey(oi => oi.OrderID);

            modelBuilder.Entity<OrderItem>()
                .ToTable(tb => tb.UseSqlOutputClause(false));

            // ProductMovement relationships
            //modelBuilder.Entity<ProductMovement>()
            //    .HasOne(pm => pm.SourceStorageArea)
            //    .WithMany()
            //    .HasForeignKey(pm => pm.SourceStorageAreaID)
            //    .OnDelete(DeleteBehavior.Restrict)
            //    .HasConstraintName("FK_ProductMovement_SourceStorageArea");

            //modelBuilder.Entity<ProductMovement>()
            //    .HasOne(pm => pm.DestinationStorageArea)
            //    .WithMany()
            //    .HasForeignKey(pm => pm.DestinationStorageAreaID)
            //    .OnDelete(DeleteBehavior.Restrict)
            //    .HasConstraintName("FK_ProductMovement_DestinationStorageArea");

            modelBuilder.Entity<ProductMovement>()
                .HasOne(pm => pm.Order)
                .WithMany(o => o.ProductMovements)
                .HasForeignKey(pm => pm.OrderID)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ProductMovement_Order");

            modelBuilder.Entity<ProductMovementItem>(entity =>
            {
                // Define the composite primary key
                entity.HasKey(pmi => new { pmi.MovementID, pmi.OrderID, pmi.ProductItemID });

                // Configure the relationship with ProductMovement
                entity.HasOne(pmi => pmi.ProductMovement)
                    .WithMany(pm => pm.ProductMovementItems)
                    .HasForeignKey(pmi => new { pmi.MovementID, pmi.OrderID })
                    .HasPrincipalKey(pm => new { pm.MovementID, pm.OrderID });

                // Configure other properties as needed
            });


            // Configure OrderItem and WarehouseStorageLocation relationships explicitly
            //modelBuilder.Entity<OrderItem>()
            //    .HasOne(oi => oi.DestinationWarehouseLocation)
            //    .WithMany(wsl => wsl.OrderItemDestinationWarehouseLocations)
            //    .HasForeignKey(oi => oi.DestinationWarehouseLocationID)
            //    .OnDelete(DeleteBehavior.Restrict);

            //modelBuilder.Entity<OrderItem>()
            //    .HasOne(oi => oi.SourceWarehouseLocation)
            //    .WithMany(wsl => wsl.OrderItemSourceWarehouseLocations)
            //    .HasForeignKey(oi => oi.SourceWarehouseLocationID)
            //    .OnDelete(DeleteBehavior.Restrict);

            // ProductMovement and MovementID configuration
            modelBuilder.Entity<ProductMovement>()
                .Property(pm => pm.MovementID)
                .ValueGeneratedOnAdd();

            // ProductMovementItem relationships with WarehouseStorageLocation
            //modelBuilder.Entity<ProductMovementItem>()
            //    .HasOne(pmi => pmi.SourceWarehouseLocation)
            //    .WithMany(wsl => wsl.ProductMovementItemSourceWarehouseLocations)
            //    .HasForeignKey(pmi => pmi.SourceWarehouseLocationID)
            //    .OnDelete(DeleteBehavior.Restrict);

            //modelBuilder.Entity<ProductMovementItem>()
            //    .HasOne(pmi => pmi.DestinationWarehouseLocation)
            //    .WithMany(wsl => wsl.ProductMovementItemDestinationWarehouseLocations)
            //    .HasForeignKey(pmi => pmi.DestinationWarehouseLocationID)
            //    .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Inventory>()
                .HasOne(wi => wi.Item)
                .WithMany(pi => pi.Inventories)
                .HasForeignKey(wi => wi.ItemID);

            modelBuilder.Entity<Inventory>()
                .HasOne(wi => wi.Location)
                .WithMany(wsl => wsl.Inventories)
                .HasForeignKey(wi => wi.LocationID);
        }
    }
}
*/
